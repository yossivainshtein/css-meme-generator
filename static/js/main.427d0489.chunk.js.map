{"version":3,"sources":["MemeInsertion.tsx","controls/InputWithLabel.js","controls/EditableLabel.tsx","controls/CssEditor.tsx","MemeInsertionEditor.tsx","MemeEditor.tsx","models/MemeTemplate.ts","MemeGenerator.tsx","index.js"],"names":["observer","Object","fromEntries","this","props","tag","css","map","prop","value","className","style","getStyle","text","React","Component","InputWithLabel","InputGroup","Prepend","Text","label","FormControl","type","onChange","name","placeholder","step","EditableLabel","spanRef","createRef","valueAtStartOfEditing","startEdit","bind","finishEdit","handleChange","keyDownHandler","current","classList","toggle","select","innerText","undefined","onValueChange","event","key","blur","currentTarget","match","exec","num_str","units","diff","num","parseInt","preventDefault","ref","onFocus","onBlur","onInput","width","length","onKeyDown","e","target","cssProp","CssPropEditor","console","log","index","setText","src","template","image_url","alt","tags","i","CssProp","makeAutoObservable","MemeTag","entries","boyfriendTemplate","left","top","color","MemeGenerator","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.427d0489.chunk.js","sourcesContent":["import { observer } from 'mobx-react';\nimport React from 'react';\nimport { WithMemeTag } from './models/MemeTemplate';\n\nexport default observer(\n    class MemeInsertion extends React.Component<WithMemeTag> {\n        private getStyle() {\n            return Object.fromEntries(this.props.tag.css.map(({prop, value}) => [prop, value]))\n        }\n\n        render() {\n            return <p className=\"memeInsertion\" style={ this.getStyle() }>{this.props.tag.text}</p>\n        }\n    }\n)","import React from 'react';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\n\n\nexport default class InputWithLabel extends React.Component {\n    render() {\n        return <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n            <InputGroup.Text>{this.props.label}</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl type={this.props.type} \n                     value={this.props.value} \n                     onChange={this.props.onChange} \n                     name={this.props.name} \n                     placeholder={this.props.placeholder} step={this.props.step}/>\n      </InputGroup>\n    }\n}","import React from 'react';\n\ninterface EditableLabelProps {\n    value: string\n    onValueChange: (value: string) => void\n}\nexport default class EditableLabel extends React.Component<EditableLabelProps> {\n    private spanRef = React.createRef<HTMLInputElement>()\n    private valueAtStartOfEditing = React.createRef<string>()\n\n    constructor(props: EditableLabelProps) {\n        super(props)\n\n        this.startEdit = this.startEdit.bind(this)\n        this.finishEdit = this.finishEdit.bind(this)\n        this.handleChange = this.handleChange.bind(this);\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n\n    }\n\n    startEdit() {\n        this.spanRef?.current?.classList.toggle('edit')\n        this.spanRef?.current?.select()\n        // this.valueAtStartOfEditing.current = this.props.value\n    }\n\n    handleChange() {\n        const value = this.spanRef?.current?.innerText\n        if (value !== undefined && value !== null) {\n            this.props.onValueChange(value)\n        }\n    }\n\n    finishEdit() {\n        this.spanRef?.current?.classList.toggle('edit')        \n    }\n\n    keyDownHandler(event: React.KeyboardEvent<HTMLInputElement>) {\n        const key = event.key\n        switch(key) {\n            case \"Escape\":\n                // this.valueAtStartOfEditing.current && this.props.onValueChange(this.valueAtStartOfEditing.current)\n                this.spanRef?.current?.blur()\n                break;\n            case \"Enter\":\n                this.spanRef?.current?.blur()\n                break;\n            case \"ArrowUp\":\n            case \"ArrowDown\":\n                const value = event.currentTarget.value\n                const match = /(\\d+)(\\%)/g.exec(value)\n                if (match) {\n                    let [_, num_str, units] = match\n                    let diff = key === 'ArrowUp' ? +1 : -1\n                    let num = parseInt(num_str)\n                    num += diff\n                    this.props.onValueChange('' + num + units)\n                }\n                event.preventDefault()\n        }\n    }\n\n    render() {\n        return (<input \n                  ref={this.spanRef} \n                  className=\"cssLabel\" \n                  onFocus={ this.startEdit }\n                  onBlur={ this.finishEdit }\n                  onInput= { this.handleChange } \n                  value = { this.props.value }\n                  style = {{\n                    width: `${this.props.value.length}ch`\n                  }}\n                  onKeyDown = { this.keyDownHandler }\n                  onChange = { (e) => this.props.onValueChange(e.target.value)}\n                 /> \n                \n                )\n            \n\n    }\n}","import { observer } from 'mobx-react';\nimport React from 'react';\nimport { CssProp } from '../models/MemeTemplate';\nimport EditableLabel from './EditableLabel'\n\n\ninterface CssEditorProps {\n    css: Array<CssProp>\n}\nexport default observer(class CssEditor extends React.Component<CssEditorProps> {\n        render() {\n            return (  \n                <p>\n                    { \n                        this.props.css.map((cssProp) => <CssPropEditor cssProp={ cssProp }/>)\n                    }           \n                </p>\n        )}\n    })\n\ninterface CssPropEditorProps {\n    cssProp: CssProp\n}\nconst CssPropEditor = observer(class CssPropEditorInner extends React.Component<CssPropEditorProps> {\n    render() {\n        return (<div className=\"cssValueContainerBox\">\n                    <EditableLabel \n                        value={this.props.cssProp.prop} \n                        onValueChange={(value: string) => { console.log('prop: ', value); this.props.cssProp.prop = value }}/>\n                    :&nbsp;\n                    <EditableLabel \n                        value={this.props.cssProp.value} \n                        onValueChange={(value: string) => { console.log('value: ', value);  this.props.cssProp.value = value }}/>\n                </div>)\n            }\n})\n    ","import React, { ChangeEvent } from 'react';\nimport InputWithLabel from './controls/InputWithLabel'\nimport CssEditor from './controls/CssEditor'\nimport { WithMemeTag } from './models/MemeTemplate';\nimport { observer } from 'mobx-react';\n\ninterface MemeInsertionEditorProps extends WithMemeTag {\n    index: number\n}\nexport default observer(class MemeInsertionEditor extends React.Component<MemeInsertionEditorProps> {\n    render() {\n        return (  \n        <div>\n            <InputWithLabel \n                label={ \"Text #\" + (this.props.index+1) } \n                value={ this.props.tag.text } \n                onChange= { (e: ChangeEvent<HTMLInputElement>) => this.props.tag.setText(e.target.value) }/>\n            <CssEditor css={ this.props.tag.css }/>\n        </div>\n    )}\n})","import { observer } from 'mobx-react';\nimport React from 'react';\nimport MemeInsertion from './MemeInsertion'\nimport MemeInsertionEditor from './MemeInsertionEditor'\nimport { WithMemeTemplate } from './models/MemeTemplate';\n\nexport default observer(\n  class MemeEditor extends React.Component<WithMemeTemplate> {\n    render() {\n      return  (\n        <div className=\"memeEditor\">\n          <div className=\"memePreview\">\n            <img className=\"memeImage\" src={this.props.template.image_url} alt=\"memeImage\"/>\n            { this.props.template.tags.map((tag, i) => <MemeInsertion key={i} tag={tag} />) }\n          </div>\n\n          <div className=\"insertionEditor\">\n            { this.props.template.tags.map((tag, i) => <MemeInsertionEditor index={i} tag={tag} />) }\n          </div>\n        </div>\n      );\n    }\n  }\n)","import { makeAutoObservable } from \"mobx\"\n\nexport class CssProp {\n    public prop: string\n    public value: string\n\n    constructor(prop: string, value: string) {\n        makeAutoObservable(this)\n        this.prop = prop\n        this.value = value\n    }\n}\n\nexport class MemeTag {\n    text: string\n    // css: Map<string, string>\n    css: Array<CssProp>\n\n    constructor(text: string, style: React.CSSProperties) {\n        makeAutoObservable(this)\n        this.text = text\n        this.css = Object.entries(style).map(([prop, value]) => new CssProp(prop, value))\n    }\n\n    setText(text: string) {\n        this.text = text\n    }\n}\n\nexport class MemeTemplate {\n    image_url: string\n    tags: MemeTag[]\n\n    constructor(image_url: string, tags: MemeTag[]) {\n        makeAutoObservable(this)\n\n        this.image_url = image_url\n        this.tags = tags\n    }\n}\n\nexport const boyfriendTemplate = new MemeTemplate('https://imgflip.com/s/meme/Distracted-Boyfriend.jpg', \n    [\n        new MemeTag('usa', { left: '23%', top: '72%' }),\n        new MemeTag('corona virus', { left: '47%', top: '50%' }),\n        new MemeTag('china', {  left : '75%', top: '65%' ,color: 'red'}),\n    ]\n)\n \n\nexport interface WithMemeTemplate {\n    template: MemeTemplate\n}\n\nexport interface WithMemeTag {\n    tag: MemeTag\n}\n  ","import React from 'react';\nimport MemeEditor from './MemeEditor'\nimport { boyfriendTemplate } from './models/MemeTemplate'\n\nexport default class MemeGenerator extends React.Component {    \n    render() {\n        return (\n          <div className=\"container\">\n            <header className=\"header\">Meme generator with CSS</header>\n            <MemeEditor template={ boyfriendTemplate }/>\n            <footer className=\"footer\">footer</footer>\n          </div>\n        );\n      }\n    }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport MemeGenerator from './MemeGenerator'\n\n\n\nReactDOM.render(\n    <MemeGenerator/>,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}